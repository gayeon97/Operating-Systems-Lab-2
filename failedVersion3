import java.util.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Paths;
public class Scheduling {
	
	public static int globalIndex = 0;
	
	static int randomOS(int u) throws FileNotFoundException {
		List<String> fileStream = null;
		try {
			fileStream = Files.readAllLines(Paths.get(System.getProperty("user.dir") + "/random-numbers"),Charset.forName("UTF-8"));
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//int fileSize = fileStream.size();
		//System.out.println("This is the number of lines of the file: " + fileSize);
		
		//int randIndex = (int) (Math.random()*fileSize);
		//System.out.println("This is the random index chosen from the file: " + randIndex);
		
		//int randIntegerChosen = Integer.parseInt(fileStream.get(randIndex));
		//System.out.println("This is the random integer chosen using the random index of the file: " + randIntegerChosen);		
		
		//System.out.println();		
		int currRandInt = Integer.parseInt(fileStream.get(globalIndex));
		System.out.println("This is current random integer retrieved from the file: " + currRandInt + "\n");
		return 1 + (currRandInt % u);
	}

	public static void main(String[] args) throws FileNotFoundException {		
		
		File inputFile = null;
		
		System.out.println("this is args.length: " + args.length);
		
		String url = System.getProperty("user.dir") + "/";		
		System.out.println(url);
		
		if (0 < args.length) {
			if (args.length == 2) {
				System.out.println("This is args[1]: " + args[1]);
				url += args[1];
				System.out.println(url);
				inputFile = new File(url);
			} else if (args.length == 1){
				System.out.println("This is args[0]: " + args[0]);
				url += args[0];
				System.out.println(url);
				inputFile = new File(url);
			}
		} else {
			System.err.println("Invalid number of command line arguments: " + args.length);
			System.exit(0);
		}
		
//		ArrayList<ArrayList<Integer>> list = new ArrayList<>();
//
//		Scanner sc = new Scanner(inputFile);
//		sc.useDelimiter("[\\s\\(\\),]+");
//		int numProcesses = 0;
//		while (sc.hasNextInt()) {
//			numProcesses = sc.nextInt();
//			System.out.println("This is number of processes: " + numProcesses);
//			
//			for (int i = 0; i < numProcesses; i ++) {
//				ArrayList<Integer> current = new ArrayList<>();
//				for (int j = 0; j < 4; j ++) {
//					current.add(sc.nextInt());
//				}		
//				list.add(current);		
//			}	
//		}	
		
		Queue<Process> list = new LinkedList<>();

		Scanner sc = new Scanner(inputFile);
		sc.useDelimiter("[\\s\\(\\),]+");
		int numProcesses = 0;
		while (sc.hasNextInt()) {
			numProcesses = sc.nextInt();
			System.out.println("This is number of processes: " + numProcesses);
			
			for (int i = 0; i < numProcesses; i ++) {
				int aInput = 0;
				int bInput = 0;
				int cInput = 0;
				int mInput = 0;
				
				//ArrayList<Integer> current = new ArrayList<>();
				for (int j = 0; j < 4; j ++){
					int next = sc.nextInt();
					if (j == 0) {
						aInput = next;
					} else if (j == 1) {
						bInput = next;
					} else if (j == 2) {
						cInput = next;
					} else {
						mInput = next;
					}
				}	
				Process temp = new Process(aInput, bInput, cInput, mInput);
				list.add(temp);
				
//				if (list.isEmpty()) {
//					list.add(temp);
//				} else {
//					//Process current = null;
//					for (int k = 0; k < list.size(); k ++) {
//						
//						Process stored = list.poll();
//						
//						if (stored.getA() > temp.getA()) {
//							list.add(temp);
//							temp = stored; 
//						} else {
//							list.add(stored);
//						}
//					}
//					list.add(temp);
//				}
			}	
		}	
		
		sc.close();
		
		System.out.println();
		
		System.out.print("The original input was: " + numProcesses);
		for (Process e: list) {
			System.out.printf(" (%d %d %d %d)",e.getA(),e.getB(),e.getC(),e.getM());
		}
		System.out.println();
			
		if (list.size() > 1) {
			Process current = list.poll();
			
			for (int k = 1; k < numProcesses ; k ++) {	
				System.out.println("current a: " + current.getA());
				System.out.println("current b: " + current.getB());
				System.out.println("current c: " + current.getC());
				System.out.println("current m: " + current.getM());
				
				Process stored = list.poll();
				
				System.out.println("stored a: " + stored.getA());
				System.out.println("stored b: " + stored.getB());
				System.out.println("stored c: " + stored.getC());
				System.out.println("stored m: " + stored.getM());
				
				if (stored.getA() >= current.getA()) {
					list.add(current);
					current = stored; 
				} else {
					list.add(stored);
				}
				System.out.println();
			}
			list.add(current);
		}
		
		System.out.print("The (sorted) input is: " + numProcesses);
		for (Process ee: list) {
			System.out.printf(" (%d %d %d %d)",ee.getA(),ee.getB(),ee.getC(),ee.getM());
		}
		
		System.out.println();
		
//		Collections.sort(list, new Comparator<ArrayList<Integer>>() {
//			@Override
//			public int compare(ArrayList<Integer> o1, ArrayList<Integer> o2) {
//				return o1.get(0).compareTo(o2.get(0));
//			}		
//		});
//		
//		for (ArrayList<Integer> e: list) {
//			for (int k = 0; k < e.size(); k ++) {
//				System.out.println(e.get(k));
//			}
//			System.out.println();
//		}
		
		//simulating FCFS!!!
		boolean fcfsFinished = false;
//		while (!fcfsFinished) {
//			
//			
//			
//		}
//		for (int ii = 0; ii < list.size(); ii ++) {
//			
//			
//		}
//		
		
		System.out.println(randomOS(1));
		globalIndex ++;
		System.out.println(randomOS(3));
		
		
	}

}
